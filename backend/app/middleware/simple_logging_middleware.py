"""
Simple logging middleware that avoids infinite loops
"""

from fastapi import Request, Response
from fastapi.responses import JSONResponse
import time
import json
from datetime import datetime
from typing import Dict, Any
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleLoggingMiddleware:
    def __init__(self, app):
        self.app = app
        # Cache pour √©viter les logs r√©p√©titifs
        self.log_cache: Dict[str, Dict[str, Any]] = {}
        self.cache_ttl = 60  # 60 secondes de cache
        
    async def __call__(self, scope, receive, send):
        if scope["type"] != "http":
            await self.app(scope, receive, send)
            return

        request = Request(scope, receive)
        start_time = time.time()
        
        # Cr√©er une cl√© unique pour cette requ√™te
        request_key = f"{request.method}:{request.url.path}"
        
        # V√©rifier si on a d√©j√† logg√© cette requ√™te r√©cemment
        current_time = time.time()
        if request_key in self.log_cache:
            last_log = self.log_cache[request_key]
            if current_time - last_log["timestamp"] < self.cache_ttl:
                # Ne pas logger si c'est trop r√©cent
                await self.app(scope, receive, send)
                return
        
        # Extraire les informations de base
        user_agent = request.headers.get("user-agent", "Unknown")
        client_ip = request.headers.get("x-forwarded-for", request.client.host if request.client else "Unknown")
        
        # Filtrer les requ√™tes de sant√© et les requ√™tes fr√©quentes
        if self._should_skip_logging(request):
            await self.app(scope, receive, send)
            return
        
        # Log de d√©but (seulement pour les requ√™tes importantes)
        if self._is_important_request(request):
            logger.info(f"üöÄ {request.method} {request.url.path} - IP: {client_ip}")
        
        # Traiter la requ√™te
        try:
            await self.app(scope, receive, send)
            end_time = time.time()
            response_time = end_time - start_time
            
            # Mettre en cache cette requ√™te
            self.log_cache[request_key] = {
                "timestamp": current_time,
                "count": self.log_cache.get(request_key, {}).get("count", 0) + 1
            }
            
            # Log de fin seulement pour les requ√™tes importantes ou les erreurs
            if self._is_important_request(request) or response_time > 1.0:
                logger.info(f"‚úÖ {request.method} {request.url.path} - {response_time:.3f}s")
                
        except Exception as e:
            end_time = time.time()
            response_time = end_time - start_time
            logger.error(f"‚ùå {request.method} {request.url.path} - Erreur: {str(e)} - {response_time:.3f}s")
            raise
    
    def _should_skip_logging(self, request: Request) -> bool:
        """D√©termine si on doit ignorer le logging pour cette requ√™te"""
        # Ignorer les requ√™tes de sant√©
        if request.url.path == "/api/health/":
            return True
        
        # Ignorer les requ√™tes de fichiers fr√©quentes
        if request.url.path.startswith("/api/files/") and request.method == "GET":
            return True
            
        # Ignorer les requ√™tes de cache
        if request.url.path.startswith("/api/cache/"):
            return True
            
        return False
    
    def _is_important_request(self, request: Request) -> bool:
        """D√©termine si c'est une requ√™te importante √† logger"""
        # Les requ√™tes d'authentification
        if request.url.path.startswith("/api/auth/"):
            return True
            
        # Les requ√™tes d'analyse
        if request.url.path.startswith("/api/analyses/"):
            return True
            
        # Les requ√™tes de configuration
        if request.url.path.startswith("/api/config/"):
            return True
            
        # Les requ√™tes POST/PUT/DELETE
        if request.method in ["POST", "PUT", "DELETE"]:
            return True
            
        return False
