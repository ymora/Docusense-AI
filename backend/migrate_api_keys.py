"""
Script de migration des cl√©s API pour assurer la persistance
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from app.core.database import SessionLocal
from app.services.config_service import ConfigService
from app.core.config import settings
import logging

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_api_keys():
    """Migration des cl√©s API vers le syst√®me de persistance"""
    
    print("üîÑ Migration des cl√©s API vers le syst√®me de persistance")
    print("=" * 60)
    
    # Cr√©er une session de base de donn√©es
    db = SessionLocal()
    
    try:
        config_service = ConfigService(db)
        
        # Mapping des providers
        provider_mapping = {
            'openai': 'openai_api_key',
            'claude': 'anthropic_api_key',
            'anthropic': 'anthropic_api_key',
            'mistral': 'mistral_api_key'
        }
        
        migrated_count = 0
        
        print("\nüìã V√©rification des cl√©s API existantes:")
        
        # V√©rifier chaque provider
        for provider, setting_attr in provider_mapping.items():
            # V√©rifier si la cl√© existe dans les settings
            setting_value = getattr(settings, setting_attr, None)
            
            # V√©rifier si la cl√© existe dans la base de donn√©es
            db_value = config_service.get_ai_provider_key(provider)
            
            print(f"\nüîç {provider.upper()}:")
            print(f"   Settings: {'*' * (len(setting_value) - 8) + setting_value[-8:] if setting_value else 'Aucune'}")
            print(f"   Base de donn√©es: {'*' * (len(db_value) - 8) + db_value[-8:] if db_value else 'Aucune'}")
            
            # Si la cl√© existe dans les settings mais pas en base, la migrer
            if setting_value and not db_value:
                print(f"   ‚ö†Ô∏è  Migration n√©cessaire...")
                success = config_service.set_ai_provider_key(provider, setting_value)
                if success:
                    print(f"   ‚úÖ Migr√©e avec succ√®s")
                    migrated_count += 1
                else:
                    print(f"   ‚ùå √âchec de la migration")
            
            # Si la cl√© existe en base mais pas dans les settings, la restaurer
            elif db_value and not setting_value:
                print(f"   ‚ö†Ô∏è  Restauration n√©cessaire...")
                config_service._save_api_key_to_settings(provider, db_value)
                print(f"   ‚úÖ Restaur√©e dans les settings")
                migrated_count += 1
            
            # Si les deux existent mais sont diff√©rentes, priorit√© √† la base
            elif setting_value and db_value and setting_value != db_value:
                print(f"   ‚ö†Ô∏è  Conflit d√©tect√©, priorit√© √† la base de donn√©es...")
                config_service._save_api_key_to_settings(provider, db_value)
                print(f"   ‚úÖ Synchronis√©e avec la base de donn√©es")
                migrated_count += 1
            
            elif setting_value and db_value and setting_value == db_value:
                print(f"   ‚úÖ D√©j√† synchronis√©e")
        
        print(f"\nüìä R√©sum√© de la migration:")
        print(f"   {migrated_count} cl√©(s) migr√©e(s)/synchronis√©e(s)")
        
        if migrated_count > 0:
            print(f"\n‚úÖ Migration termin√©e avec succ√®s!")
            print(f"   Toutes les cl√©s API sont maintenant persistantes.")
        else:
            print(f"\n‚úÖ Aucune migration n√©cessaire.")
            print(f"   Toutes les cl√©s API sont d√©j√† synchronis√©es.")
        
        # V√©rification finale
        print(f"\nüîç V√©rification finale:")
        config_service.load_api_keys_from_database()
        
        for provider, setting_attr in provider_mapping.items():
            final_value = getattr(settings, setting_attr, None)
            if final_value:
                print(f"   ‚úÖ {provider}: {'*' * (len(final_value) - 8) + final_value[-8:]}")
            else:
                print(f"   ‚ùå {provider}: Aucune cl√©")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la migration: {str(e)}")
        logger.error(f"Migration failed: {str(e)}")
        
    finally:
        db.close()

if __name__ == "__main__":
    migrate_api_keys() 