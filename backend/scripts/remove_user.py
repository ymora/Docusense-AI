#!/usr/bin/env python3
"""
Script pour supprimer un utilisateur de la base de donn√©es DocuSense AI
G√®re proprement les relations avec les analyses et les logs syst√®me
"""

import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.orm import Session
from app.core.database import SessionLocal, engine
from app.models.user import User
from app.models.analysis import Analysis
from app.models.system_log import SystemLog
from app.models.file import File


class UserRemover:
    """Classe pour supprimer un utilisateur de la base de donn√©es"""
    
    def __init__(self):
        self.db = SessionLocal()
        self.removal_stats = {
            'user_deleted': False,
            'analyses_deleted': 0,
            'system_logs_deleted': 0,
            'files_affected': 0
        }
    
    def __del__(self):
        if hasattr(self, 'db'):
            self.db.close()
    
    def find_user(self, username: str) -> User:
        """Trouver un utilisateur par son nom d'utilisateur"""
        return self.db.query(User).filter(User.username == username).first()
    
    def list_all_users(self):
        """Lister tous les utilisateurs"""
        users = self.db.query(User).all()
        print("\nüìã LISTE DES UTILISATEURS")
        print("-" * 50)
        for user in users:
            print(f"ID: {user.id} | Username: {user.username} | Email: {user.email} | Role: {user.role.value} | Actif: {user.is_active}")
        return users
    
    def show_user_details(self, user: User):
        """Afficher les d√©tails d'un utilisateur"""
        print(f"\nüë§ D√âTAILS DE L'UTILISATEUR: {user.username}")
        print("-" * 50)
        print(f"ID: {user.id}")
        print(f"Username: {user.username}")
        print(f"Email: {user.email}")
        print(f"Role: {user.role.value}")
        print(f"Actif: {user.is_active}")
        print(f"Cr√©√© le: {user.created_at}")
        print(f"Derni√®re connexion: {user.last_login}")
        
        # Compter les analyses
        analyses_count = self.db.query(Analysis).filter(Analysis.user_id == user.id).count()
        print(f"Analyses associ√©es: {analyses_count}")
        
        # Compter les logs syst√®me
        logs_count = self.db.query(SystemLog).filter(SystemLog.user_id == user.id).count()
        print(f"Logs syst√®me associ√©s: {logs_count}")
    
    def remove_user_data(self, user: User, dry_run: bool = True):
        """Supprimer toutes les donn√©es associ√©es √† un utilisateur"""
        print(f"\nüóëÔ∏è  SUPPRESSION DES DONN√âES DE L'UTILISATEUR: {user.username}")
        print("-" * 60)
        
        if dry_run:
            print("üîç MODE SIMULATION (aucune donn√©e ne sera supprim√©e)")
        else:
            print("‚ö†Ô∏è  MODE R√âEL (les donn√©es seront supprim√©es d√©finitivement)")
        
        # 1. Supprimer les analyses associ√©es
        analyses = self.db.query(Analysis).filter(Analysis.user_id == user.id).all()
        print(f"\nüìã Analyses √† supprimer: {len(analyses)}")
        for analysis in analyses:
            print(f"  - ID: {analysis.id} | Type: {analysis.analysis_type} | Statut: {analysis.status}")
            if not dry_run:
                self.db.delete(analysis)
                self.removal_stats['analyses_deleted'] += 1
        
        # 2. Supprimer les logs syst√®me associ√©s
        system_logs = self.db.query(SystemLog).filter(SystemLog.user_id == user.id).all()
        print(f"\nüìù Logs syst√®me √† supprimer: {len(system_logs)}")
        for log in system_logs:
            print(f"  - ID: {log.id} | Type: {log.log_type} | Message: {log.message[:50]}...")
            if not dry_run:
                self.db.delete(log)
                self.removal_stats['system_logs_deleted'] += 1
        
        # 3. Supprimer l'utilisateur lui-m√™me
        print(f"\nüë§ Utilisateur √† supprimer: {user.username}")
        if not dry_run:
            self.db.delete(user)
            self.removal_stats['user_deleted'] = True
        
        # 4. Valider les changements
        if not dry_run:
            try:
                self.db.commit()
                print("\n‚úÖ Suppression effectu√©e avec succ√®s!")
            except Exception as e:
                self.db.rollback()
                print(f"\n‚ùå Erreur lors de la suppression: {e}")
                return False
        else:
            print("\n‚úÖ Simulation termin√©e - Aucune donn√©e supprim√©e")
        
        return True
    
    def show_removal_stats(self):
        """Afficher les statistiques de suppression"""
        print(f"\nüìä STATISTIQUES DE SUPPRESSION")
        print("-" * 40)
        print(f"Utilisateur supprim√©: {'‚úÖ' if self.removal_stats['user_deleted'] else '‚ùå'}")
        print(f"Analyses supprim√©es: {self.removal_stats['analyses_deleted']}")
        print(f"Logs syst√®me supprim√©s: {self.removal_stats['system_logs_deleted']}")
        print(f"Fichiers affect√©s: {self.removal_stats['files_affected']}")
    
    def confirm_removal(self, username: str) -> bool:
        """Demander confirmation pour la suppression"""
        print(f"\n‚ö†Ô∏è  ATTENTION: Vous √™tes sur le point de supprimer l'utilisateur '{username}'")
        print("Cette action est IRREVERSIBLE et supprimera:")
        print("  ‚Ä¢ Toutes les analyses associ√©es √† cet utilisateur")
        print("  ‚Ä¢ Tous les logs syst√®me associ√©s √† cet utilisateur")
        print("  ‚Ä¢ L'utilisateur lui-m√™me")
        print("\nLes fichiers upload√©s ne seront PAS supprim√©s.")
        
        while True:
            confirm = input(f"\n√ätes-vous s√ªr de vouloir supprimer '{username}' ? (oui/non): ").lower().strip()
            if confirm in ['oui', 'o', 'yes', 'y']:
                return True
            elif confirm in ['non', 'n', 'no']:
                return False
            else:
                print("‚ùå Veuillez r√©pondre 'oui' ou 'non'.")


def main():
    """Fonction principale"""
    print("üóëÔ∏è  SCRIPT DE SUPPRESSION D'UTILISATEUR - DOCUSENSE AI")
    print("=" * 60)
    
    remover = UserRemover()
    
    # Lister tous les utilisateurs
    users = remover.list_all_users()
    
    if not users:
        print("‚ùå Aucun utilisateur trouv√© dans la base de donn√©es.")
        return
    
    # Demander le nom d'utilisateur √† supprimer
    print(f"\nüéØ UTILISATEUR √Ä SUPPRIMER")
    print("-" * 30)
    username = input("Entrez le nom d'utilisateur √† supprimer (ou 'marjorie' par d√©faut): ").strip()
    
    if not username:
        username = "marjorie"
    
    # Trouver l'utilisateur
    user = remover.find_user(username)
    
    if not user:
        print(f"‚ùå Utilisateur '{username}' non trouv√© dans la base de donn√©es.")
        return
    
    # Afficher les d√©tails de l'utilisateur
    remover.show_user_details(user)
    
    # Demander confirmation
    if not remover.confirm_removal(username):
        print("‚ùå Suppression annul√©e.")
        return
    
    # Effectuer une simulation d'abord
    print("\nüîç SIMULATION DE LA SUPPRESSION...")
    remover.remove_user_data(user, dry_run=True)
    
    # Demander confirmation finale
    print(f"\n‚ö†Ô∏è  CONFIRMATION FINALE")
    print("-" * 30)
    final_confirm = input("Voulez-vous proc√©der √† la suppression r√©elle ? (oui/non): ").lower().strip()
    
    if final_confirm in ['oui', 'o', 'yes', 'y']:
        print("\nüóëÔ∏è  SUPPRESSION EN COURS...")
        success = remover.remove_user_data(user, dry_run=False)
        
        if success:
            remover.show_removal_stats()
            print(f"\n‚úÖ L'utilisateur '{username}' a √©t√© supprim√© avec succ√®s!")
        else:
            print(f"\n‚ùå Erreur lors de la suppression de l'utilisateur '{username}'.")
    else:
        print("‚ùå Suppression annul√©e.")


if __name__ == "__main__":
    main()
