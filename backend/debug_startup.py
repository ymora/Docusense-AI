#!/usr/bin/env python3
"""
Script de diagnostic d√©taill√© pour identifier les probl√®mes de d√©marrage
"""

import sys
import os
import traceback
from pathlib import Path

def test_imports_step_by_step():
    """Test des imports √©tape par √©tape"""
    print("üîç DIAGNOSTIC DES IMPORTS")
    print("=" * 40)
    
    # Test 1: FastAPI
    try:
        import fastapi
        print("‚úÖ FastAPI import√©")
    except Exception as e:
        print(f"‚ùå Erreur FastAPI: {e}")
        return False
    
    # Test 2: uvicorn
    try:
        import uvicorn
        print("‚úÖ uvicorn import√©")
    except Exception as e:
        print(f"‚ùå Erreur uvicorn: {e}")
        return False
    
    # Test 3: sqlalchemy
    try:
        import sqlalchemy
        print("‚úÖ sqlalchemy import√©")
    except Exception as e:
        print(f"‚ùå Erreur sqlalchemy: {e}")
        return False
    
    # Test 4: settings
    try:
        sys.path.append(str(Path(__file__).parent / 'app'))
        from app.core.config import settings
        print("‚úÖ settings import√©")
    except Exception as e:
        print(f"‚ùå Erreur settings: {e}")
        traceback.print_exc()
        return False
    
    # Test 5: database
    try:
        from app.core.database import engine, Base
        print("‚úÖ database import√©")
    except Exception as e:
        print(f"‚ùå Erreur database: {e}")
        traceback.print_exc()
        return False
    
    # Test 6: load_api_keys_from_database
    try:
        from app.core.config import load_api_keys_from_database
        print("‚úÖ load_api_keys_from_database import√©")
    except Exception as e:
        print(f"‚ùå Erreur load_api_keys_from_database: {e}")
        traceback.print_exc()
        return False
    
    # Test 7: routers
    try:
        from app.api import health_router
        print("‚úÖ health_router import√©")
    except Exception as e:
        print(f"‚ùå Erreur health_router: {e}")
        traceback.print_exc()
        return False
    
    return True

def test_database_connection():
    """Test de la connexion √† la base de donn√©es"""
    print("\nüîç TEST DE LA BASE DE DONN√âES")
    print("=" * 40)
    
    try:
        from app.core.database import engine, SessionLocal
        
        # Test de connexion
        from sqlalchemy import text
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            print("‚úÖ Connexion √† la base de donn√©es r√©ussie")
        
        # Test de session
        db = SessionLocal()
        db.close()
        print("‚úÖ Session de base de donn√©es cr√©√©e")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur base de donn√©es: {e}")
        traceback.print_exc()
        return False

def test_api_keys_loading():
    """Test du chargement des cl√©s API"""
    print("\nüîç TEST DU CHARGEMENT DES CL√âS API")
    print("=" * 40)
    
    try:
        from app.core.config import load_api_keys_from_database
        load_api_keys_from_database()
        print("‚úÖ Chargement des cl√©s API r√©ussi")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur chargement cl√©s API: {e}")
        traceback.print_exc()
        return False

def test_fastapi_app_creation():
    """Test de cr√©ation de l'app FastAPI"""
    print("\nüîç TEST DE CR√âATION DE L'APP FASTAPI")
    print("=" * 40)
    
    try:
        from fastapi import FastAPI
        from app.api import health_router
        
        app = FastAPI(title="Test App")
        app.include_router(health_router, prefix="/api/health")
        
        print("‚úÖ App FastAPI cr√©√©e avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation app FastAPI: {e}")
        traceback.print_exc()
        return False

def test_port_availability():
    """Test de la disponibilit√© du port"""
    print("\nüîç TEST DE DISPONIBILIT√â DU PORT")
    print("=" * 40)
    
    import socket
    
    port = 8000
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('localhost', port))
            print(f"‚úÖ Port {port} disponible")
            return True
    except OSError:
        print(f"‚ùå Port {port} occup√©")
        return False

def main():
    """Fonction principale"""
    print("üöÄ DIAGNOSTIC COMPLET DU D√âMARRAGE")
    print("=" * 50)
    
    tests = [
        test_imports_step_by_step,
        test_database_connection,
        test_api_keys_loading,
        test_fastapi_app_creation,
        test_port_availability
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            print()
        except Exception as e:
            print(f"‚ùå Test {test.__name__} a √©chou√©: {e}")
            traceback.print_exc()
            print()
    
    print("=" * 50)
    print(f"üìä R√âSULTATS: {passed}/{total} tests pass√©s")
    
    if passed == total:
        print("üéâ Tous les tests passent ! Le serveur devrait d√©marrer correctement.")
        return True
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
