// Service pour la gestion des prompts universels
import { handleApiError, DEFAULT_TIMEOUT } from '../utils/apiUtils';
import unifiedApiService from './unifiedApiService';

export interface UniversalPrompt {
  id: string;
  name: string;
  description: string;
  domain: string;
  type: string;
  prompt: string;
  output_format: string;
  use_cases: string[];
}

export interface PromptRecommendation {
  id: string;
  name: string;
  description: string;
  type: string;
  relevance_score: number;
}

export interface PromptSummary {
  domain: string;
  name: string;
  description: string;
  prompts: {
    id: string;
    name: string;
    description: string;
    type: string;
    use_cases: string[];
  }[];
}

// Interface de compatibilit√© pour l'ancienne API
export interface Prompt {
  id: string;
  name: string;
  description: string;
  domain: string;
  type: string;
  content?: string;
  prompt?: string;
}

export const promptService = {
  // R√©cup√©rer tous les prompts universels
  async getAllUniversalPrompts(): Promise<Record<string, UniversalPrompt>> {
    try {
      const response = await unifiedApiService.get('/api/prompts/universal');
      return response.data || {};
    } catch (error) {
      throw new Error(`Erreur lors de la r√©cup√©ration des prompts universels: ${handleApiError(error)}`);
    }
  },

  // R√©cup√©rer le r√©sum√© des prompts universels
  async getPromptsSummary(): Promise<Record<string, PromptSummary>> {
    try {
      const response = await unifiedApiService.get('/api/prompts/summary');
      return response.data || {};
    } catch (error) {
      throw new Error(`Erreur lors de la r√©cup√©ration du r√©sum√©: ${handleApiError(error)}`);
    }
  },

  // R√©cup√©rer un prompt universel sp√©cifique
  async getUniversalPrompt(promptId: string): Promise<UniversalPrompt> {
    try {
      const response = await unifiedApiService.get(`/api/prompts/universal/${promptId}`);
      return response.data;
    } catch (error) {
      throw new Error(`Erreur lors de la r√©cup√©ration du prompt universel: ${handleApiError(error)}`);
    }
  },

  // R√©cup√©rer les recommandations de prompts bas√©es sur le type de fichier et le contexte
  async getPromptRecommendations(fileType?: string, context?: string): Promise<PromptRecommendation[]> {
    try {
      const params = new URLSearchParams();
      if (fileType) params.append('file_type', fileType);
      if (context) params.append('context', context);
      
      const response = await unifiedApiService.get(`/api/prompts/recommendations?${params.toString()}`);
      return response.data?.recommendations || [];
    } catch (error) {
      throw new Error(`Erreur lors de la r√©cup√©ration des recommandations: ${handleApiError(error)}`);
    }
  },

  // R√©cup√©rer les prompts par cas d'usage
  async getPromptsByUseCase(useCase: string): Promise<UniversalPrompt[]> {
    try {
      const response = await unifiedApiService.get(`/api/prompts/use-case/${useCase}`);
      return response.data?.prompts || [];
    } catch (error) {
      throw new Error(`Erreur lors de la r√©cup√©ration des prompts par cas d'usage: ${handleApiError(error)}`);
    }
  },

  // Formater un prompt avec du texte
  async formatPrompt(promptId: string, text: string): Promise<string> {
    try {
      const params = new URLSearchParams({ text });
      const response = await unifiedApiService.get(`/api/prompts/format/${promptId}?${params.toString()}`);
      return response.data?.formatted_prompt || '';
    } catch (error) {
      throw new Error(`Erreur lors du formatage du prompt: ${handleApiError(error)}`);
    }
  },

  // Recharger les prompts
  async reloadPrompts(): Promise<boolean> {
    try {
      const response = await unifiedApiService.post('/api/prompts/reload');
      return response.data?.reloaded || false;
    } catch (error) {
      throw new Error(`Erreur lors du rechargement des prompts: ${handleApiError(error)}`);
    }
  },

  // M√©thodes de compatibilit√© pour l'ancienne API
  async getAllPrompts(): Promise<{ default_prompts: Record<string, string>; specialized_prompts: Record<string, Prompt> }> {
    try {
      const response = await unifiedApiService.get('/api/prompts');
      return response.data || { default_prompts: {}, specialized_prompts: {} };
    } catch (error) {
      throw new Error(`Erreur lors de la r√©cup√©ration des prompts: ${handleApiError(error)}`);
    }
  },

  async getDefaultPrompts(): Promise<Record<string, string>> {
    try {
      const response = await unifiedApiService.get('/api/prompts/default');
      return response.data || {};
    } catch (error) {
      throw new Error(`Erreur lors de la r√©cup√©ration des prompts par d√©faut: ${handleApiError(error)}`);
    }
  },

  async getDefaultPrompt(analysisType: string): Promise<{ analysis_type: string; prompt: string }> {
    try {
      const response = await unifiedApiService.get(`/api/prompts/default/${analysisType}`);
      return response.data || { analysis_type: analysisType, prompt: '' };
    } catch (error) {
      throw new Error(`Erreur lors de la r√©cup√©ration du prompt par d√©faut: ${handleApiError(error)}`);
    }
  },

  async getDefaultPromptsOnly(): Promise<Record<string, string>> {
    // Donn√©es par d√©faut sans requ√™te API pour les prompts universels
    const defaultPrompts: Record<string, string> = {
      'GENERAL': 'Analysez le contenu de ce document de mani√®re g√©n√©rale.',
      'TECHNICAL': 'V√©rifiez la conformit√© technique de ce document.',
      'ADMINISTRATIVE': 'Pr√©parez un dossier administratif bas√© sur ce document.',
      'JURIDICAL': 'Analysez les aspects juridiques de ce document.',
      'COMPARISON': 'Comparez ce document avec d\'autres documents similaires.'
    };
    
    return defaultPrompts;
  },

  async getSpecializedPrompts(): Promise<Record<string, Prompt>> {
    try {
      const response = await unifiedApiService.get('/api/prompts/specialized');
      return response.data || {};
    } catch (error) {
      // Donn√©es par d√©faut en cas d'erreur API - prompts universels
      const defaultPrompts: Record<string, Prompt> = {
        'problem_analysis': {
          id: 'problem_analysis',
          name: 'üîç Analyse de Probl√®me',
          description: 'D√©tecte et analyse les probl√®mes dans vos documents pour vous aider √† agir',
          domain: 'universal',
          type: 'analysis',
          prompt: 'Tu es un expert en analyse de probl√®mes documentaires...'
        },
        'contract_comparison': {
          id: 'contract_comparison',
          name: '‚öñÔ∏è Comparaison de Contrats',
          description: 'Compare plusieurs documents pour identifier les diff√©rences et opportunit√©s',
          domain: 'universal',
          type: 'comparison',
          prompt: 'Tu es un expert en analyse comparative de documents...'
        },
        'dossier_preparation': {
          id: 'dossier_preparation',
          name: 'üìã Pr√©paration de Dossier',
          description: 'Pr√©pare un dossier complet pour proc√©dure, action ou d√©cision',
          domain: 'universal',
          type: 'preparation',
          prompt: 'Tu es un expert en pr√©paration de dossiers...'
        },
        'compliance_verification': {
          id: 'compliance_verification',
          name: 'üõ°Ô∏è V√©rification de Conformit√©',
          description: 'V√©rifie la conformit√© aux normes, r√®gles et obligations',
          domain: 'universal',
          type: 'verification',
          prompt: 'Tu es un expert en v√©rification de conformit√©...'
        },
        'communication_analysis': {
          id: 'communication_analysis',
          name: 'üìß Analyse de Communication',
          description: 'Analyse les √©changes et communications pour identifier les probl√®mes et opportunit√©s',
          domain: 'universal',
          type: 'analysis',
          prompt: 'Tu es un expert en analyse de communication...'
        }
      };
      
      return defaultPrompts;
    }
  },

  // Utilitaires pour l'interface utilisateur
  getPromptIcon(type: string): string {
    const iconMap: Record<string, string> = {
      'analysis': 'üîç',
      'comparison': '‚öñÔ∏è',
      'preparation': 'üìã',
      'verification': 'üõ°Ô∏è',
      'communication': 'üìß'
    };
    return iconMap[type] || 'üìÑ';
  },

  getPromptColor(type: string): string {
    const colorMap: Record<string, string> = {
      'analysis': 'text-blue-500',
      'comparison': 'text-green-500',
      'preparation': 'text-purple-500',
      'verification': 'text-orange-500',
      'communication': 'text-pink-500'
    };
    return colorMap[type] || 'text-gray-500';
  },

  getUseCaseDescription(useCase: string): string {
    const descriptions: Record<string, string> = {
      'construction_litigation': 'Litiges de construction',
      'contract_disputes': 'Conflits contractuels',
      'quality_issues': 'Probl√®mes de qualit√©',
      'compliance_problems': 'Probl√®mes de conformit√©',
      'communication_conflicts': 'Conflits de communication',
      'insurance_comparison': 'Comparaison d\'assurances',
      'contract_negotiation': 'N√©gociation de contrats',
      'supplier_selection': 'S√©lection de fournisseurs',
      'service_comparison': 'Comparaison de services',
      'proposal_evaluation': '√âvaluation de propositions',
      'litigation_preparation': 'Pr√©paration de litige',
      'expert_report': 'Rapport d\'expert',
      'insurance_claim': 'R√©clamation d\'assurance',
      'administrative_appeal': 'Recours administratif',
      'contract_termination': 'R√©siliation de contrat',
      'technical_compliance': 'Conformit√© technique',
      'legal_compliance': 'Conformit√© juridique',
      'contract_compliance': 'Conformit√© contractuelle',
      'regulatory_audit': 'Audit r√©glementaire',
      'quality_control': 'Contr√¥le qualit√©',
      'email_analysis': 'Analyse d\'emails',
      'correspondence_tracking': 'Suivi de correspondance',
      'response_monitoring': 'Surveillance des r√©ponses',
      'communication_strategy': 'Strat√©gie de communication',
      'evidence_collection': 'Collecte de preuves'
    };
    return descriptions[useCase] || useCase;
  }
};