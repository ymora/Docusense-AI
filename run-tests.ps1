#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Script de test complet pour DocuSense AI
.DESCRIPTION
    Ex√©cute tous les tests (backend, frontend, int√©gration) et g√©n√®re des rapports
.PARAMETER BackendOnly
    Ex√©cuter uniquement les tests backend
.PARAMETER FrontendOnly
    Ex√©cuter uniquement les tests frontend
.PARAMETER Coverage
    G√©n√©rer des rapports de couverture
.PARAMETER Verbose
    Afficher les d√©tails des tests
#>

param(
    [switch]$BackendOnly,
    [switch]$FrontendOnly,
    [switch]$Coverage,
    [switch]$Verbose
)

# Configuration
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# Couleurs pour l'affichage
$Colors = @{
    Success = "Green"
    Error = "Red"
    Warning = "Yellow"
    Info = "Cyan"
    Header = "Magenta"
}

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Colors[$Color]
}

function Write-Header {
    param([string]$Title)
    Write-ColorOutput "`n" + "="*60 $Colors.Header
    Write-ColorOutput "  $Title" $Colors.Header
    Write-ColorOutput "="*60 $Colors.Header
}

function Write-Section {
    param([string]$Title)
    Write-ColorOutput "`n--- $Title ---" $Colors.Info
}

function Test-Command {
    param([string]$Command)
    try {
        Get-Command $Command -ErrorAction Stop | Out-Null
        return $true
    }
    catch {
        return $false
    }
}

function Test-Port {
    param([int]$Port)
    try {
        $connection = Test-NetConnection -ComputerName "localhost" -Port $Port -InformationLevel Quiet -WarningAction SilentlyContinue
        return $connection.TcpTestSucceeded
    }
    catch {
        return $false
    }
}

function Start-BackendServer {
    Write-Section "D√©marrage du serveur backend"
    
    if (Test-Port 8000) {
        Write-ColorOutput "‚úÖ Le serveur backend est d√©j√† en cours d'ex√©cution sur le port 8000" $Colors.Success
        return $true
    }
    
    Write-ColorOutput "üöÄ D√©marrage du serveur backend..." $Colors.Info
    
    try {
        $backendJob = Start-Job -ScriptBlock {
            Set-Location "C:\Users\ymora\Desktop\Docusense AI\backend"
            & "venv\Scripts\python.exe" "main.py"
        }
        
        # Attendre que le serveur d√©marre
        $timeout = 30
        $elapsed = 0
        
        while ($elapsed -lt $timeout) {
            if (Test-Port 8000) {
                Write-ColorOutput "‚úÖ Serveur backend d√©marr√© avec succ√®s" $Colors.Success
                return $backendJob
            }
            Start-Sleep -Seconds 1
            $elapsed++
        }
        
        Write-ColorOutput "‚ùå Timeout lors du d√©marrage du serveur backend" $Colors.Error
        Stop-Job $backendJob -ErrorAction SilentlyContinue
        Remove-Job $backendJob -ErrorAction SilentlyContinue
        return $null
    }
    catch {
        Write-ColorOutput "‚ùå Erreur lors du d√©marrage du serveur backend: $($_.Exception.Message)" $Colors.Error
        return $null
    }
}

function Stop-BackendServer {
    param($BackendJob)
    
    if ($BackendJob) {
        Write-Section "Arr√™t du serveur backend"
        Stop-Job $BackendJob -ErrorAction SilentlyContinue
        Remove-Job $BackendJob -ErrorAction SilentlyContinue
        Write-ColorOutput "‚úÖ Serveur backend arr√™t√©" $Colors.Success
    }
}

function Test-Backend {
    Write-Header "TESTS BACKEND"
    
    # V√©rifier l'environnement Python
    Write-Section "V√©rification de l'environnement Python"
    
    if (-not (Test-Command "python")) {
        Write-ColorOutput "‚ùå Python n'est pas install√© ou n'est pas dans le PATH" $Colors.Error
        return $false
    }
    
    $pythonVersion = & python --version 2>&1
    Write-ColorOutput "‚úÖ Python d√©tect√©: $pythonVersion" $Colors.Success
    
    # V√©rifier l'environnement virtuel
    $venvPath = "backend\venv\Scripts\python.exe"
    if (-not (Test-Path $venvPath)) {
        Write-ColorOutput "‚ùå Environnement virtuel non trouv√©: $venvPath" $Colors.Error
        return $false
    }
    
    Write-ColorOutput "‚úÖ Environnement virtuel trouv√©" $Colors.Success
    
    # Installer les d√©pendances de test
    Write-Section "Installation des d√©pendances de test"
    
    try {
        Set-Location "backend"
        & "venv\Scripts\pip.exe" install pytest pytest-cov pytest-asyncio pytest-mock psutil
        if ($LASTEXITCODE -ne 0) {
            Write-ColorOutput "‚ùå Erreur lors de l'installation des d√©pendances de test" $Colors.Error
            return $false
        }
        Write-ColorOutput "‚úÖ D√©pendances de test install√©es" $Colors.Success
        Set-Location ".."
    }
    catch {
        Write-ColorOutput "‚ùå Erreur lors de l'installation des d√©pendances: $($_.Exception.Message)" $Colors.Error
        return $false
    }
    
    # Ex√©cuter les tests backend
    Write-Section "Ex√©cution des tests backend"
    
    try {
        Set-Location "backend"
        
        $testArgs = @("venv\Scripts\python.exe", "-m", "pytest", "tests/", "-v")
        
        if ($Coverage) {
            $testArgs += @("--cov=app", "--cov-report=html", "--cov-report=term-missing", "--cov-fail-under=70")
        }
        
        if ($Verbose) {
            $testArgs += @("--tb=long")
        }
        
        $testResult = & $testArgs[0] $testArgs[1..($testArgs.Length-1)]
        $exitCode = $LASTEXITCODE
        
        Set-Location ".."
        
        if ($exitCode -eq 0) {
            Write-ColorOutput "‚úÖ Tests backend r√©ussis" $Colors.Success
            return $true
        } else {
            Write-ColorOutput "‚ùå Tests backend √©chou√©s (code: $exitCode)" $Colors.Error
            return $false
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erreur lors de l'ex√©cution des tests backend: $($_.Exception.Message)" $Colors.Error
        return $false
    }
}

function Test-Frontend {
    Write-Header "TESTS FRONTEND"
    
    # V√©rifier Node.js
    Write-Section "V√©rification de Node.js"
    
    if (-not (Test-Command "node")) {
        Write-ColorOutput "‚ùå Node.js n'est pas install√© ou n'est pas dans le PATH" $Colors.Error
        return $false
    }
    
    $nodeVersion = & node --version
    Write-ColorOutput "‚úÖ Node.js d√©tect√©: $nodeVersion" $Colors.Success
    
    # V√©rifier npm
    if (-not (Test-Command "npm")) {
        Write-ColorOutput "‚ùå npm n'est pas install√© ou n'est pas dans le PATH" $Colors.Error
        return $false
    }
    
    $npmVersion = & npm --version
    Write-ColorOutput "‚úÖ npm d√©tect√©: $npmVersion" $Colors.Success
    
    # Installer les d√©pendances
    Write-Section "Installation des d√©pendances frontend"
    
    try {
        Set-Location "frontend"
        
        if (-not (Test-Path "node_modules")) {
            Write-ColorOutput "üì¶ Installation des d√©pendances..." $Colors.Info
            & npm install
            if ($LASTEXITCODE -ne 0) {
                Write-ColorOutput "‚ùå Erreur lors de l'installation des d√©pendances" $Colors.Error
                return $false
            }
        }
        
        Write-ColorOutput "‚úÖ D√©pendances frontend install√©es" $Colors.Success
        Set-Location ".."
    }
    catch {
        Write-ColorOutput "‚ùå Erreur lors de l'installation des d√©pendances: $($_.Exception.Message)" $Colors.Error
        return $false
    }
    
    # Ex√©cuter les tests frontend
    Write-Section "Ex√©cution des tests frontend"
    
    try {
        Set-Location "frontend"
        
        $testCommand = "npm"
        $testArgs = @("run", "test")
        
        if ($Coverage) {
            $testArgs = @("run", "test:coverage")
        }
        
        if ($Verbose) {
            $testArgs += @("--", "--reporter=verbose")
        }
        
        $testResult = & $testCommand $testArgs
        $exitCode = $LASTEXITCODE
        
        Set-Location ".."
        
        if ($exitCode -eq 0) {
            Write-ColorOutput "‚úÖ Tests frontend r√©ussis" $Colors.Success
            return $true
        } else {
            Write-ColorOutput "‚ùå Tests frontend √©chou√©s (code: $exitCode)" $Colors.Error
            return $false
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erreur lors de l'ex√©cution des tests frontend: $($_.Exception.Message)" $Colors.Error
        return $false
    }
}

function Test-Integration {
    Write-Header "TESTS D'INT√âGRATION"
    
    # D√©marrer le serveur backend
    $backendJob = Start-BackendServer
    if (-not $backendJob) {
        return $false
    }
    
    try {
        # Attendre que le serveur soit pr√™t
        Start-Sleep -Seconds 5
        
        # Test de l'endpoint d'audit
        Write-Section "Test de l'endpoint d'audit"
        
        try {
            $auditResponse = Invoke-RestMethod -Uri "http://localhost:8000/api/audit/health" -Method Get
            Write-ColorOutput "‚úÖ Endpoint d'audit accessible" $Colors.Success
            
            # Test d'audit complet
            Write-ColorOutput "üîç Ex√©cution d'un audit complet..." $Colors.Info
            $comprehensiveAudit = Invoke-RestMethod -Uri "http://localhost:8000/api/audit/comprehensive" -Method Get
            
            Write-ColorOutput "üìä R√©sultats de l'audit:" $Colors.Info
            Write-ColorOutput "  - Score global: $($comprehensiveAudit.summary.overall_score)" $Colors.Info
            Write-ColorOutput "  - Probl√®mes critiques: $($comprehensiveAudit.summary.critical_issues.Count)" $Colors.Info
            Write-ColorOutput "  - Recommandations: $($comprehensiveAudit.summary.recommendations.Count)" $Colors.Info
            
            if ($comprehensiveAudit.summary.critical_issues.Count -gt 0) {
                Write-ColorOutput "‚ö†Ô∏è Probl√®mes critiques d√©tect√©s:" $Colors.Warning
                foreach ($issue in $comprehensiveAudit.summary.critical_issues) {
                    Write-ColorOutput "  - $($issue.issue): $($issue.description)" $Colors.Warning
                }
            }
            
            return $true
        }
        catch {
            Write-ColorOutput "‚ùå Erreur lors du test d'audit: $($_.Exception.Message)" $Colors.Error
            return $false
        }
    }
    finally {
        Stop-BackendServer $backendJob
    }
}

function Test-Performance {
    Write-Header "TESTS DE PERFORMANCE"
    
    # D√©marrer le serveur backend
    $backendJob = Start-BackendServer
    if (-not $backendJob) {
        return $false
    }
    
    try {
        # Attendre que le serveur soit pr√™t
        Start-Sleep -Seconds 5
        
        Write-Section "Test de performance backend"
        
        try {
            Set-Location "backend"
            & "venv\Scripts\python.exe" "tests/backend/performance_test.py"
            $exitCode = $LASTEXITCODE
            Set-Location ".."
            
            if ($exitCode -eq 0) {
                Write-ColorOutput "‚úÖ Tests de performance backend r√©ussis" $Colors.Success
            } else {
                Write-ColorOutput "‚ùå Tests de performance backend √©chou√©s" $Colors.Error
            }
        }
        catch {
            Write-ColorOutput "‚ùå Erreur lors des tests de performance: $($_.Exception.Message)" $Colors.Error
        }
        
        Write-Section "Test de performance frontend"
        
        try {
            Set-Location "frontend"
            & npm run build
            $exitCode = $LASTEXITCODE
            Set-Location ".."
            
            if ($exitCode -eq 0) {
                Write-ColorOutput "‚úÖ Build frontend r√©ussi" $Colors.Success
            } else {
                Write-ColorOutput "‚ùå Build frontend √©chou√©" $Colors.Error
            }
        }
        catch {
            Write-ColorOutput "‚ùå Erreur lors du build frontend: $($_.Exception.Message)" $Colors.Error
        }
        
        return $true
    }
    finally {
        Stop-BackendServer $backendJob
    }
}

function Generate-Report {
    param(
        [bool]$BackendSuccess,
        [bool]$FrontendSuccess,
        [bool]$IntegrationSuccess,
        [bool]$PerformanceSuccess
    )
    
    Write-Header "RAPPORT FINAL"
    
    $totalTests = 4
    $passedTests = 0
    
    if ($BackendSuccess) { $passedTests++ }
    if ($FrontendSuccess) { $passedTests++ }
    if ($IntegrationSuccess) { $passedTests++ }
    if ($PerformanceSuccess) { $passedTests++ }
    
    Write-ColorOutput "üìä R√©sum√© des tests:" $Colors.Info
    Write-ColorOutput "  - Tests backend: $(if ($BackendSuccess) { '‚úÖ R√©ussi' } else { '‚ùå √âchou√©' })" $(if ($BackendSuccess) { 'Success' } else { 'Error' })
    Write-ColorOutput "  - Tests frontend: $(if ($FrontendSuccess) { '‚úÖ R√©ussi' } else { '‚ùå √âchou√©' })" $(if ($FrontendSuccess) { 'Success' } else { 'Error' })
    Write-ColorOutput "  - Tests d'int√©gration: $(if ($IntegrationSuccess) { '‚úÖ R√©ussi' } else { '‚ùå √âchou√©' })" $(if ($IntegrationSuccess) { 'Success' } else { 'Error' })
    Write-ColorOutput "  - Tests de performance: $(if ($PerformanceSuccess) { '‚úÖ R√©ussi' } else { '‚ùå √âchou√©' })" $(if ($PerformanceSuccess) { 'Success' } else { 'Error' })
    
    Write-ColorOutput "`nüìà Score global: $passedTests/$totalTests ($([math]::Round($passedTests/$totalTests*100, 1))%)" $Colors.Info
    
    if ($passedTests -eq $totalTests) {
        Write-ColorOutput "üéâ Tous les tests sont pass√©s ! L'application est pr√™te pour la commercialisation." $Colors.Success
    } else {
        Write-ColorOutput "‚ö†Ô∏è Certains tests ont √©chou√©. Veuillez corriger les probl√®mes avant la commercialisation." $Colors.Warning
    }
    
    # G√©n√©rer un rapport d√©taill√©
    $reportPath = "test-report-$(Get-Date -Format 'yyyyMMdd-HHmmss').txt"
    $report = @"
RAPPORT DE TESTS DOCUSENSE AI
============================
Date: $(Get-Date)
Version: 1.0.0

R√âSULTATS:
- Tests backend: $(if ($BackendSuccess) { 'R√âUSSI' } else { '√âCHOU√â' })
- Tests frontend: $(if ($FrontendSuccess) { 'R√âUSSI' } else { '√âCHOU√â' })
- Tests d'int√©gration: $(if ($IntegrationSuccess) { 'R√âUSSI' } else { '√âCHOU√â' })
- Tests de performance: $(if ($PerformanceSuccess) { 'R√âUSSI' } else { '√âCHOU√â' })

Score global: $passedTests/$totalTests ($([math]::Round($passedTests/$totalTests*100, 1))%)

RECOMMANDATIONS:
$(if ($passedTests -eq $totalTests) { '- L\'application respecte les standards de qualit√© pour la commercialisation' } else { '- Corriger les tests √©chou√©s avant la commercialisation' })
- Maintenir une couverture de tests > 70%
- Ex√©cuter les tests r√©guli√®rement
- Surveiller les performances en production

"@
    
    $report | Out-File -FilePath $reportPath -Encoding UTF8
    Write-ColorOutput "üìÑ Rapport d√©taill√© g√©n√©r√©: $reportPath" $Colors.Info
    
    return $passedTests -eq $totalTests
}

# Script principal
function Main {
    Write-Header "DOCUSENSE AI - SUITE DE TESTS COMPL√àTE"
    
    # Variables pour les r√©sultats
    $backendSuccess = $false
    $frontendSuccess = $false
    $integrationSuccess = $false
    $performanceSuccess = $false
    
    try {
        # Tests backend
        if (-not $FrontendOnly) {
            $backendSuccess = Test-Backend
        }
        
        # Tests frontend
        if (-not $BackendOnly) {
            $frontendSuccess = Test-Frontend
        }
        
        # Tests d'int√©gration (si backend et frontend sont OK)
        if (-not $BackendOnly -and -not $FrontendOnly) {
            if ($backendSuccess -and $frontendSuccess) {
                $integrationSuccess = Test-Integration
            } else {
                Write-ColorOutput "‚ö†Ô∏è Tests d'int√©gration ignor√©s (backend ou frontend √©chou√©)" $Colors.Warning
            }
        }
        
        # Tests de performance
        if (-not $BackendOnly -and -not $FrontendOnly) {
            $performanceSuccess = Test-Performance
        }
        
        # G√©n√©rer le rapport final
        $overallSuccess = Generate-Report $backendSuccess $frontendSuccess $integrationSuccess $performanceSuccess
        
        # Code de sortie
        if ($overallSuccess) {
            exit 0
        } else {
            exit 1
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erreur fatale: $($_.Exception.Message)" $Colors.Error
        exit 1
    }
}

# Ex√©cution du script principal
Main
