# Script de d√©marrage pour DocuSense AI
# Usage: .\scripts\start_docusense.ps1 [-BackendOnly] [-FrontendOnly] [-Clean]

param(
    [switch]$BackendOnly,
    [switch]$FrontendOnly,
    [switch]$Clean
)

# Configuration
$BackendPort = 8000
$FrontendPort = 3000
$BackendDir = "backend"
$FrontendDir = "frontend"

Write-Host "üöÄ DocuSense AI - Script de d√©marrage" -ForegroundColor Green

# Fonction pour v√©rifier si un port est utilis√©
function Test-Port {
    param([int]$Port)
    try {
        $connection = Test-NetConnection -ComputerName "localhost" -Port $Port -WarningAction SilentlyContinue
        return $connection.TcpTestSucceeded
    }
    catch {
        return $false
    }
}

# Fonction pour tuer les processus sur un port
function Stop-ProcessOnPort {
    param([int]$Port)
    try {
        $processes = Get-NetTCPConnection -LocalPort $Port -ErrorAction SilentlyContinue | Select-Object -ExpandProperty OwningProcess
        foreach ($pid in $processes) {
            Stop-Process -Id $pid -Force -ErrorAction SilentlyContinue
            Write-Host "Processus arr√™t√© sur le port $Port (PID: $pid)" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "Aucun processus trouv√© sur le port $Port" -ForegroundColor Gray
    }
}

# Fonction pour v√©rifier les pr√©requis
function Test-Prerequisites {
    Write-Host "üîç V√©rification des pr√©requis..." -ForegroundColor Blue
    
    # V√©rifier Python
    try {
        $pythonVersion = python --version 2>&1
        Write-Host "‚úÖ Python: $pythonVersion" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Python non trouv√©. Veuillez installer Python 3.8+" -ForegroundColor Red
        exit 1
    }
    
    # V√©rifier Node.js
    try {
        $nodeVersion = node --version 2>&1
        Write-Host "‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Node.js non trouv√©. Veuillez installer Node.js 16+" -ForegroundColor Red
        exit 1
    }
    
    # V√©rifier npm
    try {
        $npmVersion = npm --version 2>&1
        Write-Host "‚úÖ npm: $npmVersion" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå npm non trouv√©" -ForegroundColor Red
        exit 1
    }
}

# Fonction pour nettoyer les ports
function Clear-Ports {
    Write-Host "üßπ Nettoyage des ports..." -ForegroundColor Blue
    
    if (Test-Port $BackendPort) {
        Write-Host "Arr√™t du processus sur le port $BackendPort..." -ForegroundColor Yellow
        Stop-ProcessOnPort $BackendPort
    }
    
    if (Test-Port $FrontendPort) {
        Write-Host "Arr√™t du processus sur le port $FrontendPort..." -ForegroundColor Yellow
        Stop-ProcessOnPort $FrontendPort
    }
    
    Start-Sleep -Seconds 2
}

# Fonction pour d√©marrer le backend
function Start-Backend {
    Write-Host "üîß D√©marrage du backend..." -ForegroundColor Blue
    
    if (Test-Port $BackendPort) {
        Write-Host "‚ö†Ô∏è  Le port $BackendPort est d√©j√† utilis√©" -ForegroundColor Yellow
        return
    }
    
    if (-not (Test-Path $BackendDir)) {
        Write-Host "‚ùå Dossier backend non trouv√©" -ForegroundColor Red
        exit 1
    }
    
    Set-Location $BackendDir
    
    # V√©rifier l'environnement virtuel
    if (-not (Test-Path "venv")) {
        Write-Host "üì¶ Cr√©ation de l'environnement virtuel..." -ForegroundColor Blue
        python -m venv venv
    }
    
    # Activer l'environnement virtuel
    Write-Host "üîß Activation de l'environnement virtuel..." -ForegroundColor Blue
    & ".\venv\Scripts\Activate.ps1"
    
    # Installer les d√©pendances si n√©cessaire
    if (-not (Test-Path "venv\Lib\site-packages\fastapi")) {
        Write-Host "üì¶ Installation des d√©pendances..." -ForegroundColor Blue
        pip install -r requirements.txt
    }
    
    # D√©marrer le serveur
    Write-Host "üöÄ D√©marrage du serveur backend sur le port $BackendPort..." -ForegroundColor Green
    Start-Process -FilePath "python" -ArgumentList "main.py" -WindowStyle Normal
    
    # Attendre que le serveur d√©marre
    $attempts = 0
    while (-not (Test-Port $BackendPort) -and $attempts -lt 30) {
        Start-Sleep -Seconds 1
        $attempts++
        Write-Host "‚è≥ Attente du d√©marrage du backend... ($attempts/30)" -ForegroundColor Yellow
    }
    
    if (Test-Port $BackendPort) {
        Write-Host "‚úÖ Backend d√©marr√© avec succ√®s sur http://localhost:$BackendPort" -ForegroundColor Green
    } else {
        Write-Host "‚ùå √âchec du d√©marrage du backend" -ForegroundColor Red
        exit 1
    }
    
    Set-Location ".."
}

# Fonction pour d√©marrer le frontend
function Start-Frontend {
    Write-Host "üé® D√©marrage du frontend..." -ForegroundColor Blue
    
    if (Test-Port $FrontendPort) {
        Write-Host "‚ö†Ô∏è  Le port $FrontendPort est d√©j√† utilis√©" -ForegroundColor Yellow
        return
    }
    
    if (-not (Test-Path $FrontendDir)) {
        Write-Host "‚ùå Dossier frontend non trouv√©" -ForegroundColor Red
        exit 1
    }
    
    Set-Location $FrontendDir
    
    # Installer les d√©pendances si n√©cessaire
    if (-not (Test-Path "node_modules")) {
        Write-Host "üì¶ Installation des d√©pendances..." -ForegroundColor Blue
        npm install
    }
    
    # D√©marrer le serveur de d√©veloppement
    Write-Host "üöÄ D√©marrage du serveur frontend sur le port $FrontendPort..." -ForegroundColor Green
    Start-Process -FilePath "npm" -ArgumentList "run", "dev" -WindowStyle Normal
    
    # Attendre que le serveur d√©marre
    $attempts = 0
    while (-not (Test-Port $FrontendPort) -and $attempts -lt 30) {
        Start-Sleep -Seconds 1
        $attempts++
        Write-Host "‚è≥ Attente du d√©marrage du frontend... ($attempts/30)" -ForegroundColor Yellow
    }
    
    if (Test-Port $FrontendPort) {
        Write-Host "‚úÖ Frontend d√©marr√© avec succ√®s sur http://localhost:$FrontendPort" -ForegroundColor Green
    } else {
        Write-Host "‚ùå √âchec du d√©marrage du frontend" -ForegroundColor Red
        exit 1
    }
    
    Set-Location ".."
}

# Fonction pour afficher les URLs
function Show-URLs {
    Write-Host "`nüåê URLs d'acc√®s:" -ForegroundColor Cyan
    Write-Host "   Frontend: http://localhost:$FrontendPort" -ForegroundColor White
    Write-Host "   Backend API: http://localhost:$BackendPort" -ForegroundColor White
    Write-Host "   API Docs: http://localhost:$BackendPort/docs" -ForegroundColor White
    Write-Host "   Health Check: http://localhost:$BackendPort/api/health" -ForegroundColor White
    Write-Host ""
}

# Script principal
try {
    # V√©rifier les pr√©requis
    Test-Prerequisites
    
    # Nettoyer si demand√©
    if ($Clean) {
        Clear-Ports
    }
    
    # D√©marrer les services selon les param√®tres
    if ($BackendOnly) {
        Start-Backend
        Show-URLs
    }
    elseif ($FrontendOnly) {
        Start-Frontend
        Show-URLs
    }
    else {
        # D√©marrage complet
        Start-Backend
        Start-Sleep -Seconds 3
        Start-Frontend
        Show-URLs
    }
    
    Write-Host "üéâ DocuSense AI est pr√™t!" -ForegroundColor Green
    Write-Host "   Appuyez sur Ctrl+C pour arr√™ter les services" -ForegroundColor Gray
    
    # Attendre l'interruption
    try {
        while ($true) {
            Start-Sleep -Seconds 1
        }
    }
    catch {
        Write-Host "`nüëã Arr√™t des services..." -ForegroundColor Yellow
    }
}
catch {
    Write-Host "‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
finally {
    # Nettoyer √† la sortie
    Write-Host "üßπ Nettoyage..." -ForegroundColor Blue
    Clear-Ports
} 