# Script de test pour les endpoints de configuration AI
Write-Host "üß™ Test des endpoints de configuration AI" -ForegroundColor Cyan
Write-Host "=============================================" -ForegroundColor Cyan

# Test 1: R√©cup√©ration des providers
Write-Host "`n1. Test r√©cup√©ration des providers..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8000/api/config/ai/providers" -Method GET
    Write-Host "‚úÖ Providers r√©cup√©r√©s avec succ√®s" -ForegroundColor Green
    Write-Host "   Nombre de providers: $($response.providers.Count)" -ForegroundColor Gray
    foreach ($provider in $response.providers) {
        Write-Host "   - $($provider.name): Priorit√© $($provider.priority), Mod√®les: $($provider.models.Count)" -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ùå Erreur lors de la r√©cup√©ration des providers: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 2: R√©cup√©ration de la strat√©gie
Write-Host "`n2. Test r√©cup√©ration de la strat√©gie..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8000/api/config/ai/strategy" -Method GET
    Write-Host "‚úÖ Strat√©gie r√©cup√©r√©e avec succ√®s: $($response.strategy)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la r√©cup√©ration de la strat√©gie: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 3: R√©cup√©ration des priorit√©s
Write-Host "`n3. Test r√©cup√©ration des priorit√©s..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8000/api/config/ai/priority" -Method GET
    Write-Host "‚úÖ Priorit√©s r√©cup√©r√©es avec succ√®s" -ForegroundColor Green
    foreach ($provider in $response.priority.Keys) {
        Write-Host "   - $provider`: Priorit√© $($response.priority[$provider])" -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ùå Erreur lors de la r√©cup√©ration des priorit√©s: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 4: R√©cup√©ration des m√©triques
Write-Host "`n4. Test r√©cup√©ration des m√©triques..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8000/api/config/ai/metrics" -Method GET
    Write-Host "‚úÖ M√©triques r√©cup√©r√©es avec succ√®s" -ForegroundColor Green
    Write-Host "   Nombre de providers avec m√©triques: $($response.metrics.Keys.Count)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Erreur lors de la r√©cup√©ration des m√©triques: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 5: Test de sauvegarde d'une cl√© API (simulation)
Write-Host "`n5. Test de sauvegarde d'une cl√© API (simulation)..." -ForegroundColor Yellow
try {
    $testKey = "test_key_123"
    $body = @{ api_key = $testKey } | ConvertTo-Json
    $response = Invoke-RestMethod -Uri "http://localhost:8000/api/config/ai/key?provider=test" -Method POST -Body $body -ContentType "application/json"
    Write-Host "‚úÖ Test de sauvegarde de cl√© API r√©ussi" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors du test de sauvegarde de cl√© API: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 6: Test de changement de strat√©gie
Write-Host "`n6. Test de changement de strat√©gie..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8000/api/config/ai/strategy?strategy=quality" -Method POST
    Write-Host "‚úÖ Changement de strat√©gie r√©ussi" -ForegroundColor Green
    
    # Remettre la strat√©gie originale
    $response = Invoke-RestMethod -Uri "http://localhost:8000/api/config/ai/strategy?strategy=cost" -Method POST
    Write-Host "‚úÖ Retour √† la strat√©gie originale" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors du changement de strat√©gie: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüéâ Tests termin√©s!" -ForegroundColor Cyan
Write-Host "Le panneau de configuration devrait maintenant fonctionner correctement." -ForegroundColor Green 