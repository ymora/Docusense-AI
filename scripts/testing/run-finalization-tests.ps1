# Script de tests automatis√©s pour la finalisation DocuSense AI
# V√©rifie que toutes les optimisations sont en place et fonctionnelles

param(
    [switch]$SkipBackend,
    [switch]$SkipFrontend,
    [switch]$SkipIntegration,
    [switch]$Verbose
)

Write-Host "üß™ TESTS DE FINALISATION DOCUSENSE AI" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan

$ErrorActionPreference = "Stop"
$startTime = Get-Date

# Configuration
$backendDir = "backend"
$frontendDir = "frontend"
$testsDir = "tests"
$venvPath = "$backendDir\venv\Scripts\python.exe"

# Fonction de logging
function Write-TestLog {
    param($Message, $Status = "INFO")
    $timestamp = Get-Date -Format "HH:mm:ss"
    $color = switch ($Status) {
        "SUCCESS" { "Green" }
        "ERROR" { "Red" }
        "WARNING" { "Yellow" }
        default { "White" }
    }
    Write-Host "[$timestamp] $Message" -ForegroundColor $color
}

# Fonction de v√©rification de service
function Test-ServiceRunning {
    param($ServiceName, $Port)
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:$Port/health" -TimeoutSec 5 -ErrorAction SilentlyContinue
        return $response.StatusCode -eq 200
    } catch {
        return $false
    }
}

# Fonction de test de performance
function Test-Performance {
    param($TestName, $Script)
    Write-TestLog "Test de performance: $TestName" "INFO"
    try {
        $result = & $venvPath $Script
        if ($LASTEXITCODE -eq 0) {
            Write-TestLog "‚úÖ $TestName - PASS√â" "SUCCESS"
            return $true
        } else {
            Write-TestLog "‚ùå $TestName - √âCHOU√â" "ERROR"
            return $false
        }
    } catch {
        Write-TestLog "‚ùå $TestName - ERREUR: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

# ========================================
# 1. V√âRIFICATION DE L'ENVIRONNEMENT
# ========================================

Write-TestLog "üîç V√©rification de l'environnement..." "INFO"

# V√©rifier Python
if (Test-Path $venvPath) {
    Write-TestLog "‚úÖ Environnement Python virtuel trouv√©" "SUCCESS"
} else {
    Write-TestLog "‚ùå Environnement Python virtuel manquant" "ERROR"
    exit 1
}

# V√©rifier Node.js
if (Get-Command node -ErrorAction SilentlyContinue) {
    $nodeVersion = node --version
    Write-TestLog "‚úÖ Node.js trouv√©: $nodeVersion" "SUCCESS"
} else {
    Write-TestLog "‚ùå Node.js manquant" "ERROR"
    exit 1
}

# V√©rifier les d√©pendances
Write-TestLog "üì¶ V√©rification des d√©pendances..." "INFO"

# Backend
if (Test-Path "$backendDir\requirements.txt") {
    Write-TestLog "‚úÖ Requirements.txt trouv√©" "SUCCESS"
} else {
    Write-TestLog "‚ùå Requirements.txt manquant" "ERROR"
    exit 1
}

# Frontend
if (Test-Path "$frontendDir\package.json") {
    Write-TestLog "‚úÖ Package.json trouv√©" "SUCCESS"
} else {
    Write-TestLog "‚ùå Package.json manquant" "ERROR"
    exit 1
}

# ========================================
# 2. TESTS BACKEND
# ========================================

if (-not $SkipBackend) {
    Write-TestLog "üêç Tests Backend..." "INFO"
    
    # D√©marrer le backend en arri√®re-plan
    Write-TestLog "üöÄ D√©marrage du backend..." "INFO"
    $backendProcess = Start-Process -FilePath $venvPath -ArgumentList "$backendDir\main.py" -PassThru -WindowStyle Hidden
    
    # Attendre que le backend d√©marre
    Start-Sleep -Seconds 10
    
    # V√©rifier que le backend r√©pond
    if (Test-ServiceRunning "Backend" 8000) {
        Write-TestLog "‚úÖ Backend d√©marr√© et r√©pond" "SUCCESS"
    } else {
        Write-TestLog "‚ùå Backend ne r√©pond pas" "ERROR"
        Stop-Process -Id $backendProcess.Id -Force
        exit 1
    }
    
    # Tests unitaires
    $backendTests = @(
        @{ Name = "Tests de s√©curit√©"; Script = "$testsDir\backend\test_security.py" },
        @{ Name = "Tests d'int√©gration"; Script = "$testsDir\backend\test_integration.py" },
        @{ Name = "Tests des services"; Script = "$testsDir\backend\test_unit_services.py" },
        @{ Name = "Tests de performance"; Script = "$testsDir\backend\performance_test.py" }
    )
    
    $backendResults = @()
    foreach ($test in $backendTests) {
        $result = Test-Performance $test.Name $test.Script
        $backendResults += @{ Name = $test.Name; Success = $result }
    }
    
    # Tests de validation
    Write-TestLog "üîç Tests de validation..." "INFO"
    
    # Test du service d'authentification centralis√©
    $authTest = & $venvPath -c "
import sys
sys.path.append('$backendDir')
from app.services.auth_service import AuthService
from app.core.database import get_db
from sqlalchemy.orm import Session

db = next(get_db())
auth_service = AuthService(db)
print('‚úÖ Service d\'authentification centralis√© fonctionnel')
"
    if ($LASTEXITCODE -eq 0) {
        Write-TestLog "‚úÖ Service d'authentification centralis√©" "SUCCESS"
    } else {
        Write-TestLog "‚ùå Service d'authentification centralis√©" "ERROR"
    }
    
    # Test du syst√®me de validation unifi√©
    $validationTest = & $venvPath -c "
import sys
sys.path.append('$backendDir')
from app.utils.validators import UnifiedValidator

# Test de validation d'email
email_valid = UnifiedValidator.validate_email('test@example.com')
email_invalid = UnifiedValidator.validate_email('invalid-email')

# Test de validation de fichier
file_valid = UnifiedValidator.validate_file_extension('document.pdf')
file_invalid = UnifiedValidator.validate_file_extension('script.exe')

if email_valid and not email_invalid and file_valid and not file_invalid:
    print('‚úÖ Syst√®me de validation unifi√© fonctionnel')
else:
    print('‚ùå Syst√®me de validation unifi√© d√©faillant')
    exit(1)
"
    if ($LASTEXITCODE -eq 0) {
        Write-TestLog "‚úÖ Syst√®me de validation unifi√©" "SUCCESS"
    } else {
        Write-TestLog "‚ùå Syst√®me de validation unifi√©" "ERROR"
    }
    
    # Arr√™ter le backend
    Stop-Process -Id $backendProcess.Id -Force
    Write-TestLog "üõë Backend arr√™t√©" "INFO"
}

# ========================================
# 3. TESTS FRONTEND
# ========================================

if (-not $SkipFrontend) {
    Write-TestLog "‚öõÔ∏è Tests Frontend..." "INFO"
    
    # V√©rifier les d√©pendances frontend
    if (Test-Path "$frontendDir\node_modules") {
        Write-TestLog "‚úÖ Node modules install√©s" "SUCCESS"
    } else {
        Write-TestLog "‚ö†Ô∏è Node modules manquants, installation..." "WARNING"
        Set-Location $frontendDir
        npm install
        Set-Location ..
    }
    
    # Tests de build
    Write-TestLog "üî® Test de build..." "INFO"
    Set-Location $frontendDir
    try {
        npm run build
        if ($LASTEXITCODE -eq 0) {
            Write-TestLog "‚úÖ Build r√©ussi" "SUCCESS"
        } else {
            Write-TestLog "‚ùå Build √©chou√©" "ERROR"
            exit 1
        }
    } catch {
        Write-TestLog "‚ùå Erreur de build: $($_.Exception.Message)" "ERROR"
        exit 1
    }
    Set-Location ..
    
    # Tests de linting
    Write-TestLog "üîç Test de linting..." "INFO"
    Set-Location $frontendDir
    try {
        npm run lint
        if ($LASTEXITCODE -eq 0) {
            Write-TestLog "‚úÖ Linting r√©ussi" "SUCCESS"
        } else {
            Write-TestLog "‚ö†Ô∏è Probl√®mes de linting d√©tect√©s" "WARNING"
        }
    } catch {
        Write-TestLog "‚ùå Erreur de linting: $($_.Exception.Message)" "ERROR"
    }
    Set-Location ..
    
    # V√©rifier le service API unifi√©
    Write-TestLog "üîó V√©rification du service API unifi√©..." "INFO"
    if (Test-Path "$frontendDir\src\services\unifiedApiService.ts") {
        Write-TestLog "‚úÖ Service API unifi√© trouv√©" "SUCCESS"
        
        # V√©rifier que le service contient les m√©thodes essentielles
        $serviceContent = Get-Content "$frontendDir\src\services\unifiedApiService.ts" -Raw
        $requiredMethods = @("getFiles", "listDirectory", "createAnalysis", "testProvider")
        
        foreach ($method in $requiredMethods) {
            if ($serviceContent -match $method) {
                Write-TestLog "‚úÖ M√©thode $method trouv√©e" "SUCCESS"
            } else {
                Write-TestLog "‚ùå M√©thode $method manquante" "ERROR"
            }
        }
    } else {
        Write-TestLog "‚ùå Service API unifi√© manquant" "ERROR"
    }
}

# ========================================
# 4. TESTS D'INT√âGRATION
# ========================================

if (-not $SkipIntegration) {
    Write-TestLog "üîó Tests d'int√©gration..." "INFO"
    
    # D√©marrer les services
    Write-TestLog "üöÄ D√©marrage des services..." "INFO"
    
    # Backend
    $backendProcess = Start-Process -FilePath $venvPath -ArgumentList "$backendDir\main.py" -PassThru -WindowStyle Hidden
    
    # Attendre le d√©marrage
    Start-Sleep -Seconds 15
    
    # V√©rifier le backend
    if (Test-ServiceRunning "Backend" 8000) {
        Write-TestLog "‚úÖ Backend op√©rationnel" "SUCCESS"
    } else {
        Write-TestLog "‚ùå Backend non op√©rationnel" "ERROR"
        Stop-Process -Id $backendProcess.Id -Force
        exit 1
    }
    
    # Tests d'API
    Write-TestLog "üåê Tests d'API..." "INFO"
    
    # Test de sant√©
    try {
        $healthResponse = Invoke-RestMethod -Uri "http://localhost:8000/health" -Method Get
        if ($healthResponse.status -eq "healthy") {
            Write-TestLog "‚úÖ Endpoint de sant√© fonctionnel" "SUCCESS"
        } else {
            Write-TestLog "‚ùå Endpoint de sant√© d√©faillant" "ERROR"
        }
    } catch {
        Write-TestLog "‚ùå Erreur endpoint de sant√©: $($_.Exception.Message)" "ERROR"
    }
    
    # Test de documentation API
    try {
        $docsResponse = Invoke-WebRequest -Uri "http://localhost:8000/docs" -Method Get
        if ($docsResponse.StatusCode -eq 200) {
            Write-TestLog "‚úÖ Documentation API accessible" "SUCCESS"
        } else {
            Write-TestLog "‚ùå Documentation API inaccessible" "ERROR"
        }
    } catch {
        Write-TestLog "‚ùå Erreur documentation API: $($_.Exception.Message)" "ERROR"
    }
    
    # Test d'authentification
    Write-TestLog "üîê Test d'authentification..." "INFO"
    try {
        $authResponse = Invoke-RestMethod -Uri "http://localhost:8000/api/auth/register" -Method Post -ContentType "application/json" -Body '{
            "username": "testuser@example.com",
            "password": "TestPass123",
            "role": "user"
        }'
        Write-TestLog "‚úÖ Test d'enregistrement r√©ussi" "SUCCESS"
    } catch {
        Write-TestLog "‚ö†Ô∏è Test d'enregistrement √©chou√© (peut √™tre normal si l'utilisateur existe)" "WARNING"
    }
    
    # Arr√™ter les services
    Stop-Process -Id $backendProcess.Id -Force
    Write-TestLog "üõë Services arr√™t√©s" "INFO"
}

# ========================================
# 5. TESTS DE PERFORMANCE
# ========================================

Write-TestLog "‚ö° Tests de performance..." "INFO"

# Test de performance backend
$performanceTest = & $venvPath "$testsDir\backend\performance_test.py"
if ($LASTEXITCODE -eq 0) {
    Write-TestLog "‚úÖ Tests de performance backend r√©ussis" "SUCCESS"
} else {
    Write-TestLog "‚ùå Tests de performance backend √©chou√©s" "ERROR"
}

# Test de m√©moire
Write-TestLog "üíæ Test de m√©moire..." "INFO"
$memoryTest = & $venvPath -c "
import psutil
import os

process = psutil.Process(os.getpid())
memory_mb = process.memory_info().rss / 1024 / 1024

if memory_mb < 500:  # Moins de 500MB
    print(f'‚úÖ Utilisation m√©moire normale: {memory_mb:.1f}MB')
else:
    print(f'‚ö†Ô∏è Utilisation m√©moire √©lev√©e: {memory_mb:.1f}MB')
    exit(1)
"
if ($LASTEXITCODE -eq 0) {
    Write-TestLog "‚úÖ Test de m√©moire r√©ussi" "SUCCESS"
} else {
    Write-TestLog "‚ö†Ô∏è Utilisation m√©moire √©lev√©e" "WARNING"
}

# ========================================
# 6. V√âRIFICATION DE LA DOCUMENTATION
# ========================================

Write-TestLog "üìö V√©rification de la documentation..." "INFO"

$docsFiles = @(
    "docs\README.md",
    "docs\developers\ARCHITECTURE.md",
    "docs\developers\SERVICES.md",
    "docs\developers\TESTS.md",
    "docs\audit\IMPLEMENTATION_RECOMMANDATIONS.md",
    "docs\roadmap\AMELIORATIONS_FUTURES.md"
)

foreach ($doc in $docsFiles) {
    if (Test-Path $doc) {
        Write-TestLog "‚úÖ $doc" "SUCCESS"
    } else {
        Write-TestLog "‚ùå $doc manquant" "ERROR"
    }
}

# ========================================
# 7. R√âSUM√â FINAL
# ========================================

$endTime = Get-Date
$duration = $endTime - $startTime

Write-Host ""
Write-Host "üéØ R√âSUM√â DES TESTS DE FINALISATION" -ForegroundColor Cyan
Write-Host "===================================" -ForegroundColor Cyan
Write-Host "Dur√©e totale: $($duration.Minutes)m $($duration.Seconds)s" -ForegroundColor White

# Compter les r√©sultats
$totalTests = 0
$passedTests = 0

if (-not $SkipBackend) {
    $totalTests += $backendResults.Count
    $passedTests += ($backendResults | Where-Object { $_.Success }).Count
}

Write-Host ""
Write-Host "üìä R√âSULTATS:" -ForegroundColor Yellow
Write-Host "Tests r√©ussis: $passedTests/$totalTests" -ForegroundColor Green

if ($passedTests -eq $totalTests) {
    Write-Host ""
    Write-Host "üéâ F√âLICITATIONS ! DOCUSENSE AI EST 100% FONCTIONNEL !" -ForegroundColor Green
    Write-Host "‚úÖ Toutes les optimisations sont en place" -ForegroundColor Green
    Write-Host "‚úÖ Tous les tests passent" -ForegroundColor Green
    Write-Host "‚úÖ L'application est pr√™te pour la production" -ForegroundColor Green
    Write-Host ""
    Write-Host "üöÄ Prochaines √©tapes:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ D√©ploiement en production" -ForegroundColor White
    Write-Host "   ‚Ä¢ Monitoring et surveillance" -ForegroundColor White
    Write-Host "   ‚Ä¢ Formation des utilisateurs" -ForegroundColor White
    Write-Host "   ‚Ä¢ Support et maintenance" -ForegroundColor White
} else {
    Write-Host ""
    Write-Host "‚ö†Ô∏è ATTENTION: Certains tests ont √©chou√©" -ForegroundColor Yellow
    Write-Host "Veuillez corriger les probl√®mes avant la mise en production" -ForegroundColor Yellow
    exit 1
}

Write-Host ""
Write-Host "‚ú® Finalisation termin√©e avec succ√®s !" -ForegroundColor Green
