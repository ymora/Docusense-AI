#!/usr/bin/env python3
"""
Script d'automatisation pour la g√©n√©ration d'assets vid√©o DocuSense AI
Pr√©pare tous les √©l√©ments n√©cessaires pour une IA de g√©n√©ration vid√©o
"""

import os
import json
import shutil
from pathlib import Path

class VideoAssetGenerator:
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.presentation_dir = self.project_root / "docs" / "presentation"
        self.output_dir = self.project_root / "temp_downloads" / "video_assets"
        
    def create_output_structure(self):
        """Cr√©e la structure de dossiers pour les assets vid√©o"""
        print("üìÅ Cr√©ation de la structure des dossiers...")
        
        # Cr√©er le dossier principal
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # Sous-dossiers
        (self.output_dir / "icons").mkdir(exist_ok=True)
        (self.output_dir / "scripts").mkdir(exist_ok=True)
        (self.output_dir / "specifications").mkdir(exist_ok=True)
        (self.output_dir / "content").mkdir(exist_ok=True)
        
        print("‚úÖ Structure cr√©√©e avec succ√®s")
        
    def copy_icons(self):
        """Copie toutes les ic√¥nes SVG"""
        print("üé® Copie des ic√¥nes SVG...")
        
        icons_source = self.presentation_dir / "assets" / "icons"
        icons_dest = self.output_dir / "icons"
        
        if icons_source.exists():
            shutil.copytree(icons_source, icons_dest, dirs_exist_ok=True)
            print(f"‚úÖ {len(list(icons_dest.rglob('*.svg')))} ic√¥nes copi√©es")
        else:
            print("‚ùå Dossier des ic√¥nes non trouv√©")
            
    def copy_scripts(self):
        """Copie les scripts et storyboards"""
        print("üìù Copie des scripts...")
        
        script_source = self.presentation_dir / "script"
        script_dest = self.output_dir / "scripts"
        
        if script_source.exists():
            shutil.copytree(script_source, script_dest, dirs_exist_ok=True)
            print("‚úÖ Scripts copi√©s")
        else:
            print("‚ùå Dossier des scripts non trouv√©")
            
    def copy_specifications(self):
        """Copie les sp√©cifications techniques"""
        print("‚öôÔ∏è Copie des sp√©cifications...")
        
        spec_source = self.presentation_dir / "specifications"
        spec_dest = self.output_dir / "specifications"
        
        if spec_source.exists():
            shutil.copytree(spec_source, spec_dest, dirs_exist_ok=True)
            print("‚úÖ Sp√©cifications copi√©es")
        else:
            print("‚ùå Dossier des sp√©cifications non trouv√©")
            
    def copy_content(self):
        """Copie le contenu narratif"""
        print("üìÑ Copie du contenu...")
        
        content_source = self.presentation_dir / "content"
        content_dest = self.output_dir / "content"
        
        if content_source.exists():
            shutil.copytree(content_source, content_dest, dirs_exist_ok=True)
            print("‚úÖ Contenu copi√©")
        else:
            print("‚ùå Dossier du contenu non trouv√©")
            
    def create_instructions_file(self):
        """Cr√©e le fichier d'instructions principal"""
        print("üìã Cr√©ation du fichier d'instructions...")
        
        instructions_content = """# üé¨ INSTRUCTIONS POUR IA VID√âO - DOCUSENSE AI

## üìã MISSION
Cr√©er une vid√©o de d√©monstration professionnelle de 2-3 minutes pour DocuSense AI.

## üéØ OBJECTIF
- Pr√©senter la valeur ajout√©e de DocuSense AI
- D√©montrer les fonctionnalit√©s principales
- Convaincre les prospects de l'efficacit√©
- Maintenir un style professionnel

## üìÅ ASSETS FOURNIS
- 15 ic√¥nes SVG dans le dossier icons/
- Script complet dans scripts/script_principal.md
- Storyboard dans scripts/storyboard.md
- Sp√©cifications dans specifications/
- Contenu narratif dans content/

## üé® STYLE VISUEL
- Couleurs : #1E40AF (bleu), #10B981 (vert), #F59E0B (orange)
- Typographie : Inter (Bold, Medium, Regular)
- Style : Moderne, professionnel, technologique

## üìù STRUCTURE VID√âO
1. Introduction (0:00-0:15) - Logo avec animation
2. Probl√©matique (0:15-0:30) - Chaos documentaire
3. Solution (0:30-0:45) - Workflow 5 √©tapes
4. Fonctionnalit√©s (0:45-1:15) - D√©monstration
5. R√©sultats (1:15-1:45) - M√©triques avant/apr√®s
6. Call-to-Action (1:45-2:00) - Contact

## üé¨ FORMAT
- R√©solution : 1920x1080 (Full HD)
- Format : MP4, codec H.264
- Framerate : 30 fps
- Dur√©e : 2-3 minutes

## üéØ LIVRABLES
1. Vid√©o principale MP4 1920x1080
2. Version courte 30-60 secondes (optionnel)
3. Fichier source (si possible)

---
**L'IA peut maintenant utiliser tous ces √©l√©ments pour cr√©er une vid√©o professionnelle !**
"""
        
        with open(self.output_dir / "INSTRUCTIONS_IA_VIDEO.md", "w", encoding="utf-8") as f:
            f.write(instructions_content)
            
        print("‚úÖ Fichier d'instructions cr√©√©")
        
    def create_package_summary(self):
        """Cr√©e un r√©sum√© du package"""
        print("üì¶ Cr√©ation du r√©sum√© du package...")
        
        # Compter les fichiers
        icon_count = len(list((self.output_dir / "icons").rglob("*.svg")))
        script_count = len(list((self.output_dir / "scripts").rglob("*.md")))
        spec_count = len(list((self.output_dir / "specifications").rglob("*.md")))
        content_count = len(list((self.output_dir / "content").rglob("*.md")))
        
        summary = {
            "project": "DocuSense AI",
            "video_duration": "2-3 minutes",
            "style": "Professionnel, moderne, technologique",
            "assets": {
                "icons_svg": icon_count,
                "scripts": script_count,
                "specifications": spec_count,
                "content": content_count
            },
            "format": {
                "resolution": "1920x1080",
                "format": "MP4",
                "codec": "H.264",
                "fps": 30
            },
            "budget_estimate": "200-400‚Ç¨",
            "timeline": "5-10 jours"
        }
        
        with open(self.output_dir / "PACKAGE_SUMMARY.json", "w", encoding="utf-8") as f:
            json.dump(summary, f, indent=2, ensure_ascii=False)
            
        print("‚úÖ R√©sum√© du package cr√©√©")
        
    def generate(self):
        """G√©n√®re tous les assets vid√©o"""
        print("üöÄ G√©n√©ration des assets vid√©o DocuSense AI...")
        print("=" * 50)
        
        self.create_output_structure()
        self.copy_icons()
        self.copy_scripts()
        self.copy_specifications()
        self.copy_content()
        self.create_instructions_file()
        self.create_package_summary()
        
        print("=" * 50)
        print("‚úÖ G√©n√©ration termin√©e avec succ√®s !")
        print(f"üìÅ Dossier cr√©√© : {self.output_dir}")
        print("\nüéØ Prochaines √©tapes :")
        print("1. Ouvrir le dossier temp_downloads/video_assets/")
        print("2. Lire INSTRUCTIONS_IA_VIDEO.md")
        print("3. Envoyer le dossier √† une IA vid√©o")
        print("4. Ou utiliser les plateformes recommand√©es")

if __name__ == "__main__":
    generator = VideoAssetGenerator()
    generator.generate()

