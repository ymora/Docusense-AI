# Script de d√©marrage pour DocuSense AI

Write-Host "üöÄ D√©marrage DocuSense AI..." -ForegroundColor Green

# Fermer tous les terminaux PowerShell sauf celui-ci
$currentPID = $PID
Get-Process -Name "powershell*", "pwsh*" -ErrorAction SilentlyContinue | Where-Object { $_.Id -ne $currentPID } | Stop-Process -Force -ErrorAction SilentlyContinue

# LIB√âRATION DES PORTS ET PROCESSUS
Write-Host "üîß Lib√©ration des ports et processus..." -ForegroundColor Yellow

# Fermer tous les processus Python et Node
Write-Host "Arr√™t des processus Python et Node..." -ForegroundColor Yellow
taskkill /F /IM python.exe 2>$null
taskkill /F /IM node.exe 2>$null
Start-Sleep -Seconds 2

# Lib√©rer les ports 8000 et 3000
Write-Host "Lib√©ration des ports 8000 et 3000..." -ForegroundColor Cyan
netstat -ano | findstr ":8000 " | ForEach-Object { 
    $processId = ($_ -split '\s+')[4]
    if ($processId -match '^\d+$') {
        Stop-Process -Id $processId -Force -ErrorAction SilentlyContinue
    }
}
netstat -ano | findstr ":3000 " | ForEach-Object { 
    $processId = ($_ -split '\s+')[4]
    if ($processId -match '^\d+$') {
        Stop-Process -Id $processId -Force -ErrorAction SilentlyContinue
    }
}

Start-Sleep -Seconds 2
Write-Host "‚úÖ Ports lib√©r√©s avec succ√®s" -ForegroundColor Green

Write-Host "üìä Ouverture des 4 fen√™tres optimis√©es..." -ForegroundColor Cyan

# Terminal 1: Backend
Write-Host "=== TERMINAL BACKEND ===" -ForegroundColor Yellow
$backendScript = "Write-Host '=== BACKEND DOCUSENSE AI ===' -ForegroundColor Green; Write-Host 'Port: http://localhost:8000' -ForegroundColor Cyan; Write-Host 'Logs en temps r√©el ci-dessous:' -ForegroundColor Yellow; Write-Host ''; cd '$PWD\backend'; venv\Scripts\python.exe main.py"
Start-Process powershell -ArgumentList "-NoExit", "-Command", $backendScript

# Attendre que le backend d√©marre
Write-Host "‚è≥ Attente du d√©marrage du backend..." -ForegroundColor Yellow
Start-Sleep -Seconds 8

# Terminal 2: Frontend
Write-Host "=== TERMINAL FRONTEND ===" -ForegroundColor Yellow
$frontendScript = "Write-Host '=== FRONTEND DOCUSENSE AI ===' -ForegroundColor Green; Write-Host 'Port: http://localhost:3000' -ForegroundColor Cyan; Write-Host 'Logs en temps r√©el ci-dessous:' -ForegroundColor Yellow; Write-Host ''; cd '$PWD\frontend'; npm run dev"
Start-Process powershell -ArgumentList "-NoExit", "-Command", $frontendScript

# Attendre que le frontend d√©marre
Start-Sleep -Seconds 5

# Terminal 3: Vraie surveillance HTTP (comme DevTools)
Write-Host "=== TERMINAL HTTP SURVEILLANCE ===" -ForegroundColor Yellow
$httpScript = "Write-Host '=== VRAIE SURVEILLANCE HTTP (DEVTOOLS) ===' -ForegroundColor Magenta; Write-Host 'Capture des requ√™tes HTTP comme F12' -ForegroundColor Cyan; Write-Host 'Appuyez sur Ctrl+C pour arr√™ter' -ForegroundColor Red; Write-Host ''; cd '$PWD'; Write-Host 'üîç D√©marrage de la capture HTTP...' -ForegroundColor Green; Write-Host 'üì° Surveillance des ports 8000 et 3000' -ForegroundColor Cyan; Write-Host 'üåê Utilisez F12 dans votre navigateur pour voir les d√©tails' -ForegroundColor Yellow; Write-Host ''; `$lastLogLine = 0; `$requestCount = 0; while (`$true) { `$timestamp = Get-Date -Format 'HH:mm:ss'; Write-Host `"[`$timestamp] === REQU√äTES HTTP ACTIVES ===`" -ForegroundColor Green; `$connections = netstat -ano | findstr ':8000\|:3000' | findstr 'ESTABLISHED\|TIME_WAIT\|CLOSE_WAIT'; if (`$connections) { `$connections | ForEach-Object { `$parts = `$_ -split '\s+'; if (`$parts.Count -ge 5) { `$local = `$parts[1]; `$remote = `$parts[2]; `$state = `$parts[3]; `$pid = `$parts[4]; `$process = Get-Process -Id `$pid -ErrorAction SilentlyContinue; `$processName = if (`$process) { `$process.ProcessName } else { 'Unknown' }; if (`$local -match ':8000') { Write-Host `"üåê API: `$local -> `$remote (`$state) - `$processName`" -ForegroundColor Blue } elseif (`$local -match ':3000') { Write-Host `"‚ö° Frontend: `$local -> `$remote (`$state) - `$processName`" -ForegroundColor Green } else { Write-Host `"üîó Other: `$local -> `$remote (`$state) - `$processName`" -ForegroundColor Yellow } } } } else { Write-Host '‚è∏Ô∏è Aucune requ√™te HTTP active' -ForegroundColor Gray }; Write-Host `"[`$timestamp] === LOGS BACKEND ===`" -ForegroundColor Green; if (Test-Path 'backend\logs\docusense.log') { `$currentLogLines = Get-Content 'backend\logs\docusense.log'; if (`$currentLogLines.Count -gt `$lastLogLine) { `$newLines = `$currentLogLines | Select-Object -Skip `$lastLogLine; `$newLines | ForEach-Object { if (`$_ -match 'ERROR\|Exception\|Traceback\|Failed') { Write-Host `"‚ùå ERROR: `$_`" -ForegroundColor Red } elseif (`$_ -match 'WARNING\|Warning') { Write-Host `"‚ö†Ô∏è WARN: `$_`" -ForegroundColor Yellow } elseif (`$_ -match 'GET\|POST\|PUT\|DELETE') { Write-Host `"üì° REQUEST: `$_`" -ForegroundColor Green; `$requestCount++ } elseif (`$_ -match 'INFO\|Info') { Write-Host `"‚ÑπÔ∏è INFO: `$_`" -ForegroundColor Cyan } else { Write-Host `"üìù LOG: `$_`" -ForegroundColor White } }; `$lastLogLine = `$currentLogLines.Count } } else { Write-Host 'üì≠ Aucun nouveau log backend' -ForegroundColor Gray }; Write-Host `"[`$timestamp] === STATS ===`" -ForegroundColor Green; Write-Host `"üìä Requ√™tes totales: `$requestCount`" -ForegroundColor White; `$activeConnections = (netstat -ano | findstr ':8000\|:3000' | findstr 'ESTABLISHED' | Measure-Object).Count; Write-Host `"üîó Connexions actives: `$activeConnections`" -ForegroundColor White; Write-Host `"üí° Conseil: Ouvrez F12 dans votre navigateur pour voir les d√©tails HTTP`" -ForegroundColor Yellow; Write-Host `"[`$timestamp] ---`" -ForegroundColor Gray; Start-Sleep -Seconds 1 }"
Start-Process powershell -ArgumentList "-NoExit", "-Command", $httpScript

# Terminal 4: Logs d√©taill√©s en temps r√©el
Write-Host "=== TERMINAL LOGS D√âTAILL√âS ===" -ForegroundColor Yellow
$logsScript = "Write-Host '=== LOGS D√âTAILL√âS EN TEMPS R√âEL ===' -ForegroundColor Magenta; Write-Host 'Surveillance des fichiers de logs' -ForegroundColor Cyan; Write-Host 'Appuyez sur Ctrl+C pour arr√™ter' -ForegroundColor Red; Write-Host ''; cd '$PWD'; if (Test-Path 'backend\logs\docusense.log') { Write-Host 'üìù Surveillance du log backend en temps r√©el' -ForegroundColor Green; Get-Content 'backend\logs\docusense.log' -Wait -Tail 0 | ForEach-Object { `$timestamp = Get-Date -Format 'HH:mm:ss'; Write-Host `"[`$timestamp] üìù `$_`" -ForegroundColor Cyan } } else { Write-Host '‚ùå Fichier de log backend non trouv√©' -ForegroundColor Red; Write-Host 'Cr√©ation du fichier de log...' -ForegroundColor Yellow; New-Item -ItemType File -Force -Path 'backend\logs\docusense.log' | Out-Null; Get-Content 'backend\logs\docusense.log' -Wait -Tail 0 | ForEach-Object { `$timestamp = Get-Date -Format 'HH:mm:ss'; Write-Host `"[`$timestamp] üìù `$_`" -ForegroundColor Cyan } }"
Start-Process powershell -ArgumentList "-NoExit", "-Command", $logsScript

Write-Host "`nüéâ Solution optimis√©e avec vraie surveillance HTTP!" -ForegroundColor Green
Write-Host "Backend: http://localhost:8000" -ForegroundColor Cyan
Write-Host "Frontend: http://localhost:3000" -ForegroundColor Cyan
Write-Host "Documentation API: http://localhost:8000/docs" -ForegroundColor Cyan

Write-Host "`nüìä 4 fen√™tres optimis√©es:" -ForegroundColor Yellow
Write-Host "- Terminal 1: Backend (Python)" -ForegroundColor White
Write-Host "- Terminal 2: Frontend (Node.js)" -ForegroundColor White
Write-Host "- Terminal 3: HTTP Surveillance (comme DevTools)" -ForegroundColor White
Write-Host "- Terminal 4: Logs d√©taill√©s en temps r√©el" -ForegroundColor White
